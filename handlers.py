from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from services.nalog_analyzer import NalogGovAnalyzer
from bot.texts import START_TEXT, HELP_TEXT
from logger import logger

analyzer = NalogGovAnalyzer()

def register_handlers(dp, bot):
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        await message.answer(START_TEXT, parse_mode=ParseMode.MARKDOWN)

    @dp.message(Command("help"))
    async def cmd_help(message: Message):
        await message.answer(HELP_TEXT, parse_mode=ParseMode.MARKDOWN)

    @dp.message(F.text)
    async def handle_inn(message: Message):
        inn = message.text.strip()
        if not inn.isdigit() or len(inn) not in [10, 12]:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù!", parse_mode=ParseMode.MARKDOWN)
            return

        processing_msg = await message.answer(
            f"üîç –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ù–ù `{inn}`...\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            data = analyzer.get_financial_data(inn)
            if not data:
                await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode=ParseMode.MARKDOWN)
                return

            results = analyzer.analyze_data(data)
            if not results:
                await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", parse_mode=ParseMode.MARKDOWN)
                return

            await message.answer(analyzer.format_analysis_results(results), parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ù–ù {inn}: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", parse_mode=ParseMode.MARKDOWN)
        finally:
            try:
                await bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
            except:
                pass
